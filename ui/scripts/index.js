// Generated by LiveScript 1.3.1
(function(){
  var combo, arenaSource, scoreSource, clockElem, boardSize, cellSize, rightMargin, legendPos, legendPadding, arenaElem, paper, currentData, currentScores, drawLine, robotColors, nextColor, idsToColor, getRobotColor, update;
  combo = new Combo("http://52.16.7.112:8000");
  arenaSource = "validPlayerCoordinates";
  scoreSource = "LeaderBoard";
  combo.use([arenaSource, scoreSource, "ArenaClock"]);
  clockElem = document.getElementById("clock");
  combo.listen("ArenaClock", function(data){
    return clockElem.replaceChild(document.createTextNode(data.tick), clockElem.firstChild);
  });
  boardSize = [20, 20];
  cellSize = 20;
  rightMargin = 300;
  legendPos = [boardSize[0] * cellSize + 40, 0];
  legendPadding = 20;
  arenaElem = document.getElementById("arena");
  paper = Raphael(400, 100, boardSize[0] * cellSize + 1 + rightMargin, boardSize[1] * cellSize + 1);
  paper.setViewBox(-0.5, -0.5, boardSize[0] * cellSize + 1 + rightMargin, boardSize[1] * cellSize + 1);
  currentData = {
    "positions": []
  };
  currentScores = {};
  drawLine = function(x0, y0, x1, y1){
    return paper.path("M" + x0 + " " + y0 + "L" + x1 + " " + y1);
  };
  robotColors = ['#f00', '#0f0', '#00f', '#f0f', '#0ff', '#f0f', '#f80', '#0f8', '#80f', '#f08', '#8f0', '#08f'];
  nextColor = 0;
  idsToColor = {};
  getRobotColor = function(id){
    if (!(id in idsToColor)) {
      idsToColor[id] = robotColors[nextColor++ % robotColors.length];
    }
    return idsToColor[id];
  };
  update = function(){
    var data, i$, to$, x, y, ref$, len$, index, robot, pos, color, score, results$ = [];
    data = currentData;
    arenaElem.textContent = JSON.stringify(data, null, "  ");
    paper.clear();
    paper.renderfix();
    paper.rect(0, 0, boardSize[0] * cellSize, boardSize[1] * cellSize).attr("fill", '#eee');
    for (i$ = 0, to$ = boardSize[0]; i$ <= to$; ++i$) {
      x = i$;
      drawLine(x * cellSize, 0, x * cellSize, boardSize[1] * cellSize).attr({
        "stroke": '#000'
      });
    }
    for (i$ = 0, to$ = boardSize[1]; i$ <= to$; ++i$) {
      y = i$;
      drawLine(0, y * cellSize, boardSize[0] * cellSize, y * cellSize);
    }
    paper.rect(legendPos[0], legendPos[1], 200, (data.positions.length * 2 - 1) * cellSize + legendPadding * 2).attr({
      "fill": '#eee',
      "stroke": '#000'
    });
    for (i$ = 0, len$ = (ref$ = data.positions).length; i$ < len$; ++i$) {
      index = i$;
      robot = ref$[i$];
      pos = robot.coordinates;
      color = getRobotColor(robot.id);
      score = currentScores[robot.id] || 0;
      paper.rect(pos[0] * cellSize, pos[1] * cellSize, cellSize, cellSize).attr("fill", color);
      paper.rect(legendPos[0] + legendPadding, legendPos[1] + legendPadding + index * 2 * cellSize, cellSize, cellSize).attr("fill", color);
      results$.push(paper.text(legendPos[0] + 1.5 * cellSize + legendPadding, legendPos[1] + legendPadding + (index * 2 + 0.5) * cellSize, robot.id + ("    (" + score + ")")).attr({
        "font-size": "16px",
        "text-anchor": "start",
        "font-weight": "bold"
      }));
    }
    return results$;
  };
  combo.listen(arenaSource, function(data){
    currentData = data;
    return update();
  });
  combo.listen(scoreSource, function(scores){
    currentScores = scores.scores;
    return update();
  });
  update();
}).call(this);
